
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: redis
  name: redis

spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate

  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - image: redis
        imagePullPolicy: IfNotPresent
        name: redis
        ports:
        - containerPort: 6379
      restartPolicy: Always
      terminationGracePeriodSeconds: 1

---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: mongo
  name: mongo

spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate

  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
      - image: mongo
        imagePullPolicy: IfNotPresent
        name: mongo
        ports:
        - containerPort: 27017
        volumeMounts:
          - name: storage
            mountPath: /data/db
      volumes:
      - name: storage
        persistentVolumeClaim:
          claimName: mongo-volumeclaim
      restartPolicy: Always
      terminationGracePeriodSeconds: 1

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: flask
  name: flask

spec:
  replicas: 3
  selector:
    matchLabels:
      app: flask
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate

  template:
    metadata:
      labels:
        app: flask
    spec:
      containers:
      - image: flaskapp:v1
        imagePullPolicy: IfNotPresent
        name: flask
        ports:
        - containerPort: 8080
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

---

